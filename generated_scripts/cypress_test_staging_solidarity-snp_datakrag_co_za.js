// Solidariteit netwerk Test Suite for staging.solidarity-snp.datakrag.co.za;
// Generated on: https://staging.solidarity-snp.datakrag.co.za/registreer;
// Purpose: Smoke, E2E, authentication, and Livewire tests;
// Note: Uses page object model and fixtures for maintainability;
// Requires: npm install cypress mochawesome cypress-wait-until;

Cypress.config('defaultCommandTimeout', 10000);
Cypress.config('pageLoadTimeout', 30000);
;
describe('Solidariteit netwerk - Automated Test Suite', () => {;
  before(() => {;
    // Load test data from fixtures;
    cy.fixture('test_data.json').as('testData');
  });
;
  beforeEach(() => {;
    // Visit page and wait for Livewire to load;
    page.visit();
    cy.window().should('have.property', 'document.readyState', 'complete');
    cy.get('body').should('be.visible');
    cy.intercept('POST', '**/_livewire**').as('livewireUpdate');
  });
;
  describe('Smoke Tests', () => {;
    it('loads the page successfully', () => {;
      // Verifies page loads and is interactable;
      cy.url().should('eq', 'https://staging.solidarity-snp.datakrag.co.za/registreer');
      cy.title().should('not.be.empty');
      page.getElement('body').should('be.visible');
      cy.on('uncaught:exception', (err) => {;
        cy.log(`Unhandled exception: ${err.message}`);
        return false;
      });
    });
  });
;
  describe('End-to-End Tests', () => {;

    it('completes a Livewire form submission', () => {;
      // Fills and submits a form, verifying Livewire update;
      // Assumes success message or redirect on submission;
      page.getElement('//main/section[1]/div/article/div/form').should('exist').within(() => {;
        page.getElement('input#email[name='email']:visible');
          .type('test.user@example.com', { delay: 50 });
          .should('have.value', 'test.user@example.com');
        page.getElement('[placeholder='1990-01-01']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('[wire\\:model='registerUserForm.password']');
          .type('TestPassword123!', { delay: 50 });
          .should('have.value', 'TestPassword123!');
        page.getElement('input#termsAndConditions:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('button#confirmTermsButton:visible').click();
      });
      cy.wait('@livewireUpdate').its('response.statusCode').should('eq', 200);
      cy.get('body').should('contain', 'success'); // Adjust based on response;
    });
;
    it('tests login with valid credentials', function() {;
      // Tests successful login using fixture data;
      // Assumes redirect to dashboard on success;
      page.login(this.testData.users[0].email, this.testData.users[0].password);
      cy.wait('@livewireUpdate');
      cy.url().should('include', '/dashboard'); // Adjust based on redirect;
      cy.contains(this.testData.users[0].email); // Verify user data;
    });
;
    it('tests login with invalid credentials', function() {;
      // Tests login failure with invalid credentials;
      // Assumes error message is displayed;
      page.login(this.testData.users[1].email, this.testData.users[1].password);
      cy.wait('@livewireUpdate');
      cy.contains('Invalid credentials'); // Adjust based on error message;
    });
;
    it('verifies Livewire state update', () => {;
      // Tests Livewire component state update;
      // Verifies input value persists after Livewire update;
      page.getElement('[wire\\:model='registerUserForm.password']').type('TestPassword123!', { delay: 50 });
      cy.wait('@livewireUpdate');
      page.getElement('[wire\\:model='registerUserForm.password']').should('have.value', 'TestPassword123!');
    });
;
  });
}});
