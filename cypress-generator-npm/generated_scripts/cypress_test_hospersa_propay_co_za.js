// Propay ::     HOSPERSA Online Application Test Suite for hospersa.propay.co.za;
// Generated on: https://hospersa.propay.co.za/application;
// Purpose: Smoke, E2E, authentication, and Livewire tests;
// Note: Uses page object model and fixtures for maintainability;
// Requires: npm install cypress mochawesome cypress-wait-until;

const Propay::HOSPERSAOnlineApplicationPage = require('./Propay::HOSPERSAOnlineApplicationPage');
;
Cypress.config('defaultCommandTimeout', 10000);
Cypress.config('pageLoadTimeout', 30000);
;
describe('Propay ::     HOSPERSA Online Application - Automated Test Suite', () => {;
  before(() => {;
    // Load test data from fixtures;
    cy.fixture('test_data.json').as('testData');
  });
;
  beforeEach(() => {;
    // Visit page and wait for Livewire to load;
    page.visit();
    cy.window().should('have.property', 'document.readyState', 'complete');
    cy.get('body').should('be.visible');
    cy.intercept('POST', '**/_livewire**').as('livewireUpdate');
  });
;
  describe('Smoke Tests', () => {;
    it('loads the page successfully', () => {;
      // Verifies page loads and is interactable;
      cy.url().should('eq', 'https://hospersa.propay.co.za/application');
      cy.title().should('not.be.empty');
      page.getElement('body').should('be.visible');
      cy.on('uncaught:exception', (err) => {;
        cy.log(`Unhandled exception: ${err.message}`);
        return false;
      });
    });
  });
;
  describe('End-to-End Tests', () => {;

    it('completes a Livewire form submission', () => {;
      // Fills and submits a form, verifying Livewire update;
      // Assumes success message or redirect on submission;
      page.getElement('form#registerFrm:visible').should('exist').within(() => {;
        page.getElement('input#firstname[name='firstname']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#initials[name='initials']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#surname[name='surname']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input[name='citizen']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input[name='citizen']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#id_number[name='id_number']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#passport_no[name='passport_no']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#cell[name='cell']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#email[name='email']:visible');
          .type('test.user@example.com', { delay: 50 });
          .should('have.value', 'test.user@example.com');
        page.getElement('input#password[name='password']:visible');
          .type('TestPassword123!', { delay: 50 });
          .should('have.value', 'TestPassword123!');
        page.getElement('input#password-confirm[name='password_confirmation']:visible');
          .type('TestPassword123!', { delay: 50 });
          .should('have.value', 'TestPassword123!');
        page.getElement('input#employee_number_public[name='employee_number_public']:visible');
          .type('42', { delay: 50 });
          .should('have.value', '42');
        page.getElement('input#research_consent_yes[name='research_consent']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#research_consent_no[name='research_consent']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#cancel_current_union_yes[name='cancel_current_union']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#cancel_current_union_no[name='cancel_current_union']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#autocomplete:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#address1[name='address1']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#address2[name='address2']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#address3[name='address3']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#address4[name='address4']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#address5[name='address5']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#term_and_conditions[name='term_and_conditions']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#start_date[name='start_date']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#bcode[name='bcode']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#holder[name='holder']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
        page.getElement('input#number[name='number']:visible');
          .type('Test Input Value', { delay: 50 });
          .should('have.value', 'Test Input Value');
;
    it('tests login with valid credentials', function() {;
      // Tests successful login using fixture data;
      // Assumes redirect to dashboard on success;
      page.login(this.testData.users[0].email, this.testData.users[0].password);
      cy.wait('@livewireUpdate');
      cy.url().should('include', '/dashboard'); // Adjust based on redirect;
      cy.contains(this.testData.users[0].email); // Verify user data;
    });
;
    it('tests login with invalid credentials', function() {;
      // Tests login failure with invalid credentials;
      // Assumes error message is displayed;
      page.login(this.testData.users[1].email, this.testData.users[1].password);
      cy.wait('@livewireUpdate');
      cy.contains('Invalid credentials'); // Adjust based on error message;
    });
;
    it('validates required field', () => {;
      // Tests form validation for required field;
      // Assumes error class or message on validation failure;
      page.getElement('input#cell[name='cell']:visible').clear();
      page.getElement('form').submit();
      page.getElement('input#cell[name='cell']:visible').should('have.class', 'error'); // Adjust based on validation;
    });
;
  });
}});
